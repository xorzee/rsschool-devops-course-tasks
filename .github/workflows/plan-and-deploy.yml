name: Plan and deploy

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  plan-and-deploy:
    runs-on: ubuntu-latest
    name: Create Terraform Plan
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.ACTION_ROLE_ARN }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        env:
          TF_VAR_security_ec2_key_pair_name: ${{ secrets.EC2_SSH_KEY_NAME }}
        run: |
          terraform plan -no-color -out=tfplan -input=false
          terraform show -no-color tfplan > repr-tfplan
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const botName = 'github-actions[bot]';

            let plan;
            try {
              plan = fs.readFileSync('repr-tfplan', 'utf8');
            } catch (err) {
              console.error(err);
              plan = 'failed to generate a plan.';
            };

            // Function to create the plan output
            const createPlanOutput = () => `#### Terraform Plan üìù\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${plan}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            // Get existing comments
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            // Find and delete the previous comment
            for (const comment of comments.data) {
              if (comment.user.login === botName && comment.body.includes('Terraform Plan')) {
                await github.rest.issues.deleteComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: comment.id
                });
                break; // Stop after deleting the first matching comment
              }
            }

            // Create a new comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: createPlanOutput()
            });

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: terraform apply -auto-approve -no-color -input=false tfplan
